AWSTemplateFormatVersion: '2010-09-09'
Description: ''

## ============================
## ==== Parameter Assignment===


Parameters:

  pVPCid:
    Type: String
    Description: "VPC Id"
    Default: "vpc-064adfdf4fc98a417"

  pSubnetsGroup:
    Type: CommaDelimitedList
    Description: "Subnet Id for PrivateSubnet0"
    Default: "subnet-001b5c60c3618121c, subnet-0d661cb50f5ece38d, subnet-083de05ef504bca81, subnet-0015614a29d20dad2, subnet-053dde501374abc88, subnet-02c2bd5cf2c1f98fd"
        
  pSecurityGroup:
    Type: String
    Description: "Inbound access on Postgres from Deere internal network"
    Default: "sg-007a1675e982420b9"

  pRDSType:
    AllowedValues:
      - db-cluster
      - db-instance
    Default: db-instance
    Type: String

  pLambdaName:
    Type: String
    Default: "NLBAutoUpdate"
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '^[a-zA-Z]+[0-9a-zA-Z\-]*$'


  ###### Env Var for lambda function need to put DB end point and NLB TG arn #####

  pRDSPOrt:
    Type: Number
    Default: 5432
    MinValue: 1115
    MaxValue: 65535

  pDBEndPoint: 
    Type: String
    Default: "database-1.c9dmc1iavuno.us-east-1.rds.amazonaws.com"
    MinLength: '1'
    MaxLength: '128'

  rNetworkLoadBalancerTargetGroup:
     Type: String
     Default: ""


   
## =====================================
##======================================
Resources:

## ==== IAM Role for S3 Buket access 
 rLambdaPrivsRole:
   Type: AWS::IAM::Role
   Properties:
     AssumeRolePolicyDocument:
       Version: '2012-10-17'
       Statement:
       - Effect: Allow
         Principal:
           Service:
           - lambda.amazonaws.com
         Action:
         - sts:AssumeRole
     Path: "/"
     Policies:
       - PolicyName: !Sub 'UpdateNLBIpPolicy${AWS::StackName}'
         PolicyDocument:
           Version: '2012-10-17'
           Statement:
           - Effect: Allow
             Action:
             - ec2:CreateNetworkInterface 
             - ec2:DeleteNetworkInterface 
             - ec2:DescribeNetworkInterfaces
             - elasticloadbalancing:DescribeTargetHealth
             - elasticloadbalancing:DeregisterTargets
             - elasticloadbalancing:RegisterTargets
             Resource: "*"
           - Effect: Allow
             Action:
             - logs:CreateLogGroup
             Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
           - Effect: Allow
             Action:
             - logs:CreateLogStream
             - logs:PutLogEvents
             Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${pLambdaName}:*'
     ManagedPolicyArns:
       - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     RoleName: !Sub "UpdateNLBIpRole-${AWS::StackName}"
    

## ======= Create lambda ==========
 rLambdaNLBUpdate:
   Type: AWS::Lambda::Function
   Properties:
     VpcConfig:
       SecurityGroupIds: 
       - !Ref pSecurityGroup
       SubnetIds: !Ref pSubnetsGroup
     FunctionName: !Join 
                    - ''
                    - - !Ref pLambdaName
                      - '-'
                      - !Sub ${AWS::StackName}
     Runtime: python3.9
     Role: !GetAtt rLambdaPrivsRole.Arn
     Handler: index.lambda_handler
     Environment:
       Variables: 
         Cluster_EndPoint: !Ref pDBEndPoint
         RDS_Port: !Ref pRDSPOrt
         NLB_TG_ARN: !Ref rNetworkLoadBalancerTargetGroup
     Code:
       ZipFile: |
        import os
        import json
        import socket
        import sys
        import boto3
        
        # Get Environment varilables
        vCluster = os.environ.get('Cluster_EndPoint')
        vELB_arn = os.environ.get('NLB_TG_ARN')
        vNewPort = os.environ.get('RDS_Port')
        client = boto3.client('elbv2')
        
        def lambda_handler(event, context):
        
            # DeRegister old IP from NLB
            def deregister_oldip(vOldIp, vOldPort, vOldAZ):
                response = client.deregister_targets(
                    TargetGroupArn=vELB_arn,
                    Targets=[
                        {
                            'Id': vOldIp,
                            'Port': vOldPort,
                            'AvailabilityZone': vOldAZ
                        },
                    ]
                )
        
        # Register new IP to NLB
            def register_newip(vNewIP, vNewPort):
                response = client.register_targets(
                    TargetGroupArn=vELB_arn,
                    Targets=[
                        {
                            'Id': vNewIP,
                            'Port': int(vNewPort)
                        },
                    ]
                )
        
        # Get Master Node IP address
            vNewIP = socket.gethostbyname_ex(vCluster)    
            IPs = vNewIP[2]
            print('IP list from DNS: ', IPs)
        
        # Get Registered IP detail from NLB        
            dictNLB = client.describe_target_health(
                TargetGroupArn=vELB_arn
            )
        
            ip_list = []
            for i in  dictNLB['TargetHealthDescriptions']:
                ip = i.get('Target').get('Id')
                ip_list.append(ip)
        
            if not ip_list:
                for nIP in IPs:
                    print('Register New IP ', nIP, 'Port: ', vNewPort)
                    register_newip(nIP, vNewPort)
        
            DeRegisterIP = set(ip_list) - set(IPs)
            RegisterIP = set(IPs) - set(ip_list)
            
            if DeRegisterIP:
                print('IP: ', str(DeRegisterIP), ' will be DeRegistered from NLB Target')
            
            if RegisterIP:
                print('IP: ', str(RegisterIP), ' will be registered to NLB Target')
        
            for nIP in RegisterIP:
                print('Registering New IP ', nIP, 'Port: ', vNewPort)
                register_newip(nIP, vNewPort)
                
            for oIP in dictNLB['TargetHealthDescriptions']:
                vOldIp = oIP.get('Target').get('Id')
                vOldPort = oIP.get('Target').get('Port')
                vOldAZ = oIP.get('Target').get('AvailabilityZone')
                print('IP list from NLB Target Group: ', vOldIp)
                if vOldIp in DeRegisterIP:
                    print('DeRegister IP: ', vOldIp, 'Port; ', vOldPort, 'AZ: ', vOldAZ)
                    deregister_oldip(vOldIp, vOldPort, vOldAZ)

     Description: "Lambda function to update NLB target group IP address"
     TracingConfig:
       Mode: Active
      
 rLambdaTriggerTopic:
   Type: AWS::SNS::Topic
   Properties:
    TopicName: !Sub "LambdaForNLBUpdate${AWS::StackName}"

 rAttachTopicPolicy:
   Type: AWS::SNS::TopicPolicy
   Properties:
     PolicyDocument:
       Version: "2008-10-17"
       Id: "__default_policy_ID"
       Statement: 
           - Sid: "__default_statement_ID"
             Effect: "Allow"
             Principal:
               AWS: "*"
             Action:
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:Publish
              - SNS:Receive
             Resource: 
              - !Ref rLambdaTriggerTopic
             Condition:
               StringEquals:
                 AWS:SourceOwner: !Sub "${AWS::AccountId}"
     Topics:
       - !Ref rLambdaTriggerTopic

 rLambdaTriggerSubscription:
   Type: AWS::SNS::Subscription
   Properties:
      Endpoint: !GetAtt rLambdaNLBUpdate.Arn
      Protocol: lambda
      TopicArn: !Ref rLambdaTriggerTopic

 rEventSubscription:
   Type: AWS::RDS::EventSubscription
   Properties:
     EventCategories:
       - failover
       - failure
     SnsTopicArn: !Ref rLambdaTriggerTopic
     SourceIds:
       - !Select [0, !Split [".", !Ref pDBEndPoint]]
     SourceType: !Ref "pRDSType"
     Enabled: true  

 rSnsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt rLambdaNLBUpdate.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref rLambdaTriggerTopic
     
#  rVPCEndpointService:    
#    Type: AWS::EC2::VPCEndpointService
#    Properties: 
#      AcceptanceRequired: no
#      NetworkLoadBalancerArns: 
#        - !Ref rNetworkLoadBalancer 
      
## Output Section
## ========================
Outputs:

  oLambdaPrivsRole:
    Description: 'Role for Lambda function'
    Value: !Ref rLambdaPrivsRole         

  oLambdaName:
    Description: 'Lambda function name'
    Value: !Join 
           - ''
           - - !Ref pLambdaName
             - '-'
             - !Sub ${AWS::StackName}

  oLambdaTriggerTopic:
    Description: 'SNS Topic name'
    Value: !GetAtt rLambdaTriggerTopic.TopicName
 
  oLambdaTriggerSubscription:
    Description: 'SNS Topic subscription'
    Value: !Ref rLambdaTriggerSubscription         

  oEventSubscription:
    Description: 'RDS Event subscription'
    Value: !Ref rEventSubscription         

  oSnsLambdaInvokePermission:
    Description: 'Lambda Invoke Permission'
    Value: !Ref rSnsLambdaInvokePermission 
    
  # oVPCEndpointService:
  #   Description: 'VPC Endpoint Servie'
  #   Value: !Ref rVPCEndpointService     
